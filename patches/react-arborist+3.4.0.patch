diff --git a/node_modules/react-arborist/.DS_Store b/node_modules/react-arborist/.DS_Store
new file mode 100644
index 0000000..4f9dc7f
Binary files /dev/null and b/node_modules/react-arborist/.DS_Store differ
diff --git a/node_modules/react-arborist/jest.config.js b/node_modules/react-arborist/jest.config.js
new file mode 100755
index 0000000..0accbe8
--- /dev/null
+++ b/node_modules/react-arborist/jest.config.js
@@ -0,0 +1,198 @@
+/**
+ * For a detailed explanation regarding each configuration property, visit:
+ * https://jestjs.io/docs/configuration
+ */
+
+/** @type {import('jest').Config} */
+const config = {
+  // All imported modules in your tests should be mocked automatically
+  // automock: false,
+
+  // Stop running tests after `n` failures
+  // bail: 0,
+
+  // The directory where Jest should store its cached dependency information
+  // cacheDirectory: "/private/var/folders/lt/60gl0cgx76x1cm9cf7jrgp400000gn/T/jest_dx",
+
+  // Automatically clear mock calls, instances, contexts and results before every test
+  clearMocks: true,
+
+  // Indicates whether the coverage information should be collected while executing the test
+  // collectCoverage: false,
+
+  // An array of glob patterns indicating a set of files for which coverage information should be collected
+  // collectCoverageFrom: undefined,
+
+  // The directory where Jest should output its coverage files
+  // coverageDirectory: undefined,
+
+  // An array of regexp pattern strings used to skip coverage collection
+  // coveragePathIgnorePatterns: [
+  //   "/node_modules/"
+  // ],
+
+  // Indicates which provider should be used to instrument code for coverage
+  coverageProvider: "v8",
+
+  // A list of reporter names that Jest uses when writing coverage reports
+  // coverageReporters: [
+  //   "json",
+  //   "text",
+  //   "lcov",
+  //   "clover"
+  // ],
+
+  // An object that configures minimum threshold enforcement for coverage results
+  // coverageThreshold: undefined,
+
+  // A path to a custom dependency extractor
+  // dependencyExtractor: undefined,
+
+  // Make calling deprecated APIs throw helpful error messages
+  // errorOnDeprecated: false,
+
+  // The default configuration for fake timers
+  // fakeTimers: {
+  //   "enableGlobally": false
+  // },
+
+  // Force coverage collection from ignored files using an array of glob patterns
+  // forceCoverageMatch: [],
+
+  // A path to a module which exports an async function that is triggered once before all test suites
+  // globalSetup: undefined,
+
+  // A path to a module which exports an async function that is triggered once after all test suites
+  // globalTeardown: undefined,
+
+  // A set of global variables that need to be available in all test environments
+  // globals: {},
+
+  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.
+  // maxWorkers: "50%",
+
+  // An array of directory names to be searched recursively up from the requiring module's location
+  // moduleDirectories: [
+  //   "node_modules"
+  // ],
+
+  // An array of file extensions your modules use
+  // moduleFileExtensions: [
+  //   "js",
+  //   "mjs",
+  //   "cjs",
+  //   "jsx",
+  //   "ts",
+  //   "tsx",
+  //   "json",
+  //   "node"
+  // ],
+
+  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module
+  // moduleNameMapper: {},
+
+  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader
+  // modulePathIgnorePatterns: [],
+
+  // Activates notifications for test results
+  // notify: false,
+
+  // An enum that specifies notification mode. Requires { notify: true }
+  // notifyMode: "failure-change",
+
+  // A preset that is used as a base for Jest's configuration
+  preset: "ts-jest",
+
+  // Run tests from one or more projects
+  // projects: undefined,
+
+  // Use this configuration option to add custom reporters to Jest
+  // reporters: undefined,
+
+  // Automatically reset mock state before every test
+  // resetMocks: false,
+
+  // Reset the module registry before running each individual test
+  // resetModules: false,
+
+  // A path to a custom resolver
+  // resolver: undefined,
+
+  // Automatically restore mock state and implementation before every test
+  // restoreMocks: false,
+
+  // The root directory that Jest should scan for tests and modules within
+  rootDir: "./src",
+
+  // A list of paths to directories that Jest should use to search for files in
+  // roots: [
+  //   "<rootDir>"
+  // ],
+
+  // Allows you to use a custom runner instead of Jest's default test runner
+  // runner: "jest-runner",
+
+  // The paths to modules that run some code to configure or set up the testing environment before each test
+  // setupFiles: [],
+
+  // A list of paths to modules that run some code to configure or set up the testing framework before each test
+  // setupFilesAfterEnv: [],
+
+  // The number of seconds after which a test is considered as slow and reported as such in the results.
+  // slowTestThreshold: 5,
+
+  // A list of paths to snapshot serializer modules Jest should use for snapshot testing
+  // snapshotSerializers: [],
+
+  // The test environment that will be used for testing
+  // testEnvironment: "jest-environment-node",
+
+  // Options that will be passed to the testEnvironment
+  // testEnvironmentOptions: {},
+
+  // Adds a location field to test results
+  // testLocationInResults: false,
+
+  // The glob patterns Jest uses to detect test files
+  // testMatch: [
+  //   "**/__tests__/**/*.[jt]s?(x)",
+  //   "**/?(*.)+(spec|test).[tj]s?(x)"
+  // ],
+
+  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped
+  // testPathIgnorePatterns: [
+  //   "/node_modules/"
+  // ],
+
+  // The regexp pattern or array of patterns that Jest uses to detect test files
+  // testRegex: [],
+
+  // This option allows the use of a custom results processor
+  // testResultsProcessor: undefined,
+
+  // This option allows use of a custom test runner
+  // testRunner: "jest-circus/runner",
+
+  // A map from regular expressions to paths to transformers
+  // transform: undefined,
+
+  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation
+  // transformIgnorePatterns: [
+  //   "/node_modules/",
+  //   "\\.pnp\\.[^\\/]+$"
+  // ],
+
+  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them
+  // unmockedModulePathPatterns: undefined,
+
+  // Indicates whether each individual test should be reported during the run
+  // verbose: undefined,
+
+  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode
+  // watchPathIgnorePatterns: [],
+
+  // Whether to use watchman for file crawling
+  // watchman: true,
+};
+
+module.exports = config;
diff --git a/node_modules/react-arborist/src/components/cursor.tsx b/node_modules/react-arborist/src/components/cursor.tsx
old mode 100644
new mode 100755
index 658664c..d6804b8
--- a/node_modules/react-arborist/src/components/cursor.tsx
+++ b/node_modules/react-arborist/src/components/cursor.tsx
@@ -7,7 +7,7 @@ export function Cursor() {
   if (!cursor || cursor.type !== "line") return null;
   const indent = tree.indent;
   const top =
-    tree.rowHeight * cursor.index +
+    tree.rowTopPosition(cursor.index) +
     (tree.props.padding ?? tree.props.paddingTop ?? 0);
   const left = indent * cursor.level;
   const Cursor = tree.renderCursor;
diff --git a/node_modules/react-arborist/src/components/default-container.tsx b/node_modules/react-arborist/src/components/default-container.tsx
old mode 100644
new mode 100755
index f92dd5c..47e1785
--- a/node_modules/react-arborist/src/components/default-container.tsx
+++ b/node_modules/react-arborist/src/components/default-container.tsx
@@ -1,4 +1,4 @@
-import { FixedSizeList } from "react-window";
+import { VariableSizeList } from "react-window";
 import { useDataUpdates, useTreeApi } from "../context";
 import { focusNextElement, focusPrevElement } from "../utils";
 import { ListOuterElement } from "./list-outer-element";
@@ -217,7 +217,7 @@ export function DefaultContainer() {
       }}
     >
       {/* @ts-ignore */}
-      <FixedSizeList
+      <VariableSizeList
         className={tree.props.className}
         outerRef={tree.listEl}
         itemCount={tree.visibleNodes.length}
@@ -233,7 +233,7 @@ export function DefaultContainer() {
         ref={tree.list}
       >
         {RowContainer}
-      </FixedSizeList>
+      </VariableSizeList>
     </div>
   );
 }
diff --git a/node_modules/react-arborist/src/components/default-cursor.tsx b/node_modules/react-arborist/src/components/default-cursor.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/default-drag-preview.tsx b/node_modules/react-arborist/src/components/default-drag-preview.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/default-node.tsx b/node_modules/react-arborist/src/components/default-node.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/default-row.tsx b/node_modules/react-arborist/src/components/default-row.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/drag-preview-container.tsx b/node_modules/react-arborist/src/components/drag-preview-container.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/list-inner-element.tsx b/node_modules/react-arborist/src/components/list-inner-element.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/list-outer-element.tsx b/node_modules/react-arborist/src/components/list-outer-element.tsx
old mode 100644
new mode 100755
index 672419e..c645931
--- a/node_modules/react-arborist/src/components/list-outer-element.tsx
+++ b/node_modules/react-arborist/src/components/list-outer-element.tsx
@@ -5,7 +5,7 @@ import { Cursor } from "./cursor";
 
 export const ListOuterElement = forwardRef(function Outer(
   props: React.HTMLProps<HTMLDivElement>,
-  ref
+  ref,
 ) {
   const { children, ...rest } = props;
   const tree = useTreeApi();
@@ -29,7 +29,9 @@ const DropContainer = () => {
   return (
     <div
       style={{
-        height: tree.visibleNodes.length * tree.rowHeight,
+        height:
+          tree.rowTopPosition(tree.visibleNodes.length - 1) +
+          tree.rowHeight(tree.visibleNodes.length - 1),
         width: "100%",
         position: "absolute",
         left: "0",
diff --git a/node_modules/react-arborist/src/components/outer-drop.ts b/node_modules/react-arborist/src/components/outer-drop.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/provider.tsx b/node_modules/react-arborist/src/components/provider.tsx
old mode 100644
new mode 100755
index 0326c82..469aa44
--- a/node_modules/react-arborist/src/components/provider.tsx
+++ b/node_modules/react-arborist/src/components/provider.tsx
@@ -6,7 +6,7 @@ import {
   useRef,
 } from "react";
 import { useSyncExternalStore } from "use-sync-external-store/shim";
-import { FixedSizeList } from "react-window";
+import { VariableSizeList } from "react-window";
 import {
   DataUpdatesContext,
   DndContext,
@@ -35,7 +35,7 @@ export function TreeProvider<T>({
   imperativeHandle,
   children,
 }: Props<T>) {
-  const list = useRef<FixedSizeList | null>(null);
+  const list = useRef<VariableSizeList | null>(null);
   const listEl = useRef<HTMLDivElement | null>(null);
   const store = useRef<Store<RootState, Actions>>(
     // @ts-ignore
diff --git a/node_modules/react-arborist/src/components/row-container.tsx b/node_modules/react-arborist/src/components/row-container.tsx
old mode 100644
new mode 100755
index 1018d40..11f6e53
--- a/node_modules/react-arborist/src/components/row-container.tsx
+++ b/node_modules/react-arborist/src/components/row-container.tsx
@@ -60,7 +60,6 @@ export const RowContainer = React.memo(function RowContainer<T>({
     role: "treeitem",
     "aria-level": node.level + 1,
     "aria-selected": node.isSelected,
-    "aria-expanded": node.isOpen,
     style: rowStyle,
     tabIndex: -1,
     className: tree.props.rowClassName,
diff --git a/node_modules/react-arborist/src/components/tree-container.tsx b/node_modules/react-arborist/src/components/tree-container.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/components/tree.tsx b/node_modules/react-arborist/src/components/tree.tsx
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/context.ts b/node_modules/react-arborist/src/context.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/data/create-index.ts b/node_modules/react-arborist/src/data/create-index.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/data/create-list.ts b/node_modules/react-arborist/src/data/create-list.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/data/create-root.ts b/node_modules/react-arborist/src/data/create-root.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/data/make-tree.ts b/node_modules/react-arborist/src/data/make-tree.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/data/simple-tree.ts b/node_modules/react-arborist/src/data/simple-tree.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/dnd/compute-drop.ts b/node_modules/react-arborist/src/dnd/compute-drop.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/dnd/drag-hook.ts b/node_modules/react-arborist/src/dnd/drag-hook.ts
old mode 100644
new mode 100755
index a1a74c0..9388e23
--- a/node_modules/react-arborist/src/dnd/drag-hook.ts
+++ b/node_modules/react-arborist/src/dnd/drag-hook.ts
@@ -6,6 +6,8 @@ import { NodeApi } from "../interfaces/node-api";
 import { DragItem } from "../types/dnd";
 import { DropResult } from "./drop-hook";
 import { actions as dnd } from "../state/dnd-slice";
+import { safeRun } from "../utils";
+import { ROOT_ID } from "../data/create-root";
 
 export function useDragHook<T>(node: NodeApi<T>): ConnectDragSource {
   const tree = useTreeApi();
@@ -18,14 +20,28 @@ export function useDragHook<T>(node: NodeApi<T>): ConnectDragSource {
         // This is fired once at the begging of a drag operation
         const dragIds = tree.isSelected(node.id) ? Array.from(ids) : [node.id];
         tree.dispatch(dnd.dragStart(node.id, dragIds));
-        return { id: node.id, dragIds };
+        return { id: node.id };
       },
       end: () => {
         tree.hideCursor();
+        let { parentId, index, dragIds } = tree.state.dnd;
+        // If they held down meta, we need to create a copy
+        // if (drop.dropEffect === "copy")
+        if (tree.canDrop()) {
+          safeRun(tree.props.onMove, {
+            dragIds,
+            parentId: parentId === ROOT_ID ? null : parentId,
+            index: index === null ? 0 : index, // When it's null it was dropped over a folder
+            dragNodes: tree.dragNodes,
+            parentNode: tree.get(parentId),
+          });
+          tree.open(parentId);
+        }
+        tree.list?.current?.resetAfterIndex(0);
         tree.dispatch(dnd.dragEnd());
       },
     }),
-    [ids, node],
+    [ids, node]
   );
 
   useEffect(() => {
diff --git a/node_modules/react-arborist/src/dnd/drop-hook.ts b/node_modules/react-arborist/src/dnd/drop-hook.ts
old mode 100644
new mode 100755
index 4161451..6be259d
--- a/node_modules/react-arborist/src/dnd/drop-hook.ts
+++ b/node_modules/react-arborist/src/dnd/drop-hook.ts
@@ -5,8 +5,6 @@ import { NodeApi } from "../interfaces/node-api";
 import { DragItem } from "../types/dnd";
 import { computeDrop } from "./compute-drop";
 import { actions as dnd } from "../state/dnd-slice";
-import { safeRun } from "../utils";
-import { ROOT_ID } from "../data/create-root";
 
 export type DropResult = {
   parentId: string | null;
@@ -15,7 +13,7 @@ export type DropResult = {
 
 export function useDropHook(
   el: RefObject<HTMLElement | null>,
-  node: NodeApi<any>,
+  node: NodeApi<any>
 ): ConnectDropTarget {
   const tree = useTreeApi();
   const [_, dropRef] = useDrop<DragItem, DropResult | null, void>(
@@ -43,18 +41,9 @@ export function useDropHook(
       },
       drop: (_, m) => {
         if (!m.canDrop()) return null;
-        let { parentId, index, dragIds } = tree.state.dnd;
-        safeRun(tree.props.onMove, {
-          dragIds,
-          parentId: parentId === ROOT_ID ? null : parentId,
-          index: index === null ? 0 : index, // When it's null it was dropped over a folder
-          dragNodes: tree.dragNodes,
-          parentNode: tree.get(parentId),
-        });
-        tree.open(parentId);
       },
     }),
-    [node, el.current, tree.props],
+    [node, el.current, tree.props]
   );
 
   return dropRef;
diff --git a/node_modules/react-arborist/src/dnd/measure-hover.ts b/node_modules/react-arborist/src/dnd/measure-hover.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/dnd/outer-drop-hook.ts b/node_modules/react-arborist/src/dnd/outer-drop-hook.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/hooks/use-fresh-node.ts b/node_modules/react-arborist/src/hooks/use-fresh-node.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/hooks/use-simple-tree.ts b/node_modules/react-arborist/src/hooks/use-simple-tree.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/hooks/use-validated-props.ts b/node_modules/react-arborist/src/hooks/use-validated-props.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/index.ts b/node_modules/react-arborist/src/index.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/interfaces/node-api.ts b/node_modules/react-arborist/src/interfaces/node-api.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/interfaces/tree-api.test.ts b/node_modules/react-arborist/src/interfaces/tree-api.test.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/interfaces/tree-api.ts b/node_modules/react-arborist/src/interfaces/tree-api.ts
old mode 100644
new mode 100755
index cc0d28b..f516a78
--- a/node_modules/react-arborist/src/interfaces/tree-api.ts
+++ b/node_modules/react-arborist/src/interfaces/tree-api.ts
@@ -2,7 +2,11 @@ import { EditResult } from "../types/handlers";
 import { Identity, IdObj } from "../types/utils";
 import { TreeProps } from "../types/tree-props";
 import { MutableRefObject } from "react";
-import { Align, FixedSizeList, ListOnItemsRenderedProps } from "react-window";
+import {
+  Align,
+  ListOnItemsRenderedProps,
+  VariableSizeList,
+} from "react-window";
 import * as utils from "../utils";
 import { DefaultCursor } from "../components/default-cursor";
 import { DefaultRow } from "../components/default-row";
@@ -34,8 +38,8 @@ export class TreeApi<T> {
   constructor(
     public store: Store<RootState, Actions>,
     public props: TreeProps<T>,
-    public list: MutableRefObject<FixedSizeList | null>,
-    public listEl: MutableRefObject<HTMLDivElement | null>
+    public list: MutableRefObject<VariableSizeList | null>,
+    public listEl: MutableRefObject<HTMLDivElement | null>,
   ) {
     /* Changes here must also be made in update() */
     this.root = createRoot<T>(this);
@@ -79,10 +83,6 @@ export class TreeApi<T> {
     return this.props.indent ?? 24;
   }
 
-  get rowHeight() {
-    return this.props.rowHeight ?? 24;
-  }
-
   get overscanCount() {
     return this.props.overscanCount ?? 1;
   }
@@ -91,6 +91,33 @@ export class TreeApi<T> {
     return (this.props.searchTerm || "").trim();
   }
 
+  rowHeight = (index: number): number => {
+    if (!this.props.rowHeight) {
+      return 24;
+    }
+
+    const node = this.at(index);
+    if (!node) {
+      return 0;
+    }
+
+    return typeof this.props.rowHeight === "function"
+      ? this.props.rowHeight(node)
+      : this.props.rowHeight;
+  };
+
+  rowTopPosition = (index: number): number => {
+    let position = 0;
+    for (let i = 0; i < index; i++) {
+      position += this.rowHeight(i);
+    }
+    return position;
+  };
+
+  redrawList = (afterIndex?: number | undefined | null) => {
+    this.list.current?.resetAfterIndex(afterIndex ?? 0);
+  };
+
   get matchFn() {
     const match =
       this.props.searchMatch ??
@@ -194,7 +221,7 @@ export class TreeApi<T> {
       type?: "internal" | "leaf";
       parentId?: null | string;
       index?: null | number;
-    } = {}
+    } = {},
   ) {
     const parentId =
       opts.parentId === undefined
@@ -224,6 +251,9 @@ export class TreeApi<T> {
     const idents = Array.isArray(node) ? node : [node];
     const ids = idents.map(identify);
     const nodes = ids.map((id) => this.get(id)!).filter((n) => !!n);
+
+    this.redrawList(Math.min(...nodes.map((node) => node.rowIndex ?? 0)));
+
     await safeRun(this.props.onDelete, { nodes, ids });
   }
 
@@ -232,6 +262,7 @@ export class TreeApi<T> {
     this.resolveEdit({ cancelled: true });
     this.scrollTo(id);
     this.dispatch(edit(id));
+    this.redrawList(this.get(id)?.rowIndex);
     return new Promise((resolve) => {
       TreeApi.editPromise = resolve;
     });
@@ -247,12 +278,14 @@ export class TreeApi<T> {
     });
     this.dispatch(edit(null));
     this.resolveEdit({ cancelled: false, value });
+    this.redrawList(this.get(id)?.rowIndex);
     setTimeout(() => this.onFocus()); // Return focus to element;
   }
 
   reset() {
     this.dispatch(edit(null));
     this.resolveEdit({ cancelled: true });
+    this.redrawList();
     setTimeout(() => this.onFocus()); // Return focus to element;
   }
 
@@ -342,7 +375,6 @@ export class TreeApi<T> {
     if (!node) return;
     const id = identify(node);
     this.dispatch(selection.remove(id));
-    safeRun(this.props.onSelect, this.selectedNodes);
   }
 
   selectMulti(identity: Identity) {
@@ -471,19 +503,21 @@ export class TreeApi<T> {
 
   /* Visibility */
 
-  open(identity: Identity) {
+  open(identity: Identity, redraw: boolean = true) {
     const id = identifyNull(identity);
     if (!id) return;
     if (this.isOpen(id)) return;
     this.dispatch(visibility.open(id, this.isFiltered));
+    redraw && this.redrawList(this.get(id)?.rowIndex);
     safeRun(this.props.onToggle, id);
   }
 
-  close(identity: Identity) {
+  close(identity: Identity, redraw: boolean = true) {
     const id = identifyNull(identity);
     if (!id) return;
     if (!this.isOpen(id)) return;
     this.dispatch(visibility.close(id, this.isFiltered));
+    redraw && this.redrawList(this.get(id)?.rowIndex);
     safeRun(this.props.onToggle, id);
   }
 
@@ -500,9 +534,10 @@ export class TreeApi<T> {
     let parent = node?.parent;
 
     while (parent) {
-      this.open(parent.id);
+      this.open(parent.id, false);
       parent = parent.parent;
     }
+    this.redrawList();
   }
 
   openSiblings(node: NodeApi<T>) {
@@ -513,23 +548,26 @@ export class TreeApi<T> {
       const isOpen = node.isOpen;
       for (let sibling of parent.children) {
         if (sibling.isInternal) {
-          isOpen ? this.close(sibling.id) : this.open(sibling.id);
+          isOpen ? this.close(sibling.id, false) : this.open(sibling.id, false);
         }
       }
+      this.redrawList();
       this.scrollTo(this.focusedNode);
     }
   }
 
   openAll() {
     utils.walk(this.root, (node) => {
-      if (node.isInternal) node.open();
+      if (node.isInternal) this.open(node, false);
     });
+    this.redrawList();
   }
 
   closeAll() {
     utils.walk(this.root, (node) => {
-      if (node.isInternal) node.close();
+      if (node.isInternal) this.close(node, false);
     });
+    this.redrawList();
   }
 
   /* Scrolling */
@@ -594,12 +632,12 @@ export class TreeApi<T> {
 
   isEditable(data: T) {
     const check = this.props.disableEdit || (() => false);
-    return !utils.access(data, check);
+    return !utils.access(data, check) ?? true;
   }
 
   isDraggable(data: T) {
     const check = this.props.disableDrag || (() => false);
-    return !utils.access(data, check);
+    return !utils.access(data, check) ?? true;
   }
 
   isDragging(node: string | IdObj | null) {
diff --git a/node_modules/react-arborist/src/state/dnd-slice.ts b/node_modules/react-arborist/src/state/dnd-slice.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/state/drag-slice.ts b/node_modules/react-arborist/src/state/drag-slice.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/state/edit-slice.ts b/node_modules/react-arborist/src/state/edit-slice.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/state/focus-slice.ts b/node_modules/react-arborist/src/state/focus-slice.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/state/initial.ts b/node_modules/react-arborist/src/state/initial.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/state/open-slice.ts b/node_modules/react-arborist/src/state/open-slice.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/state/root-reducer.ts b/node_modules/react-arborist/src/state/root-reducer.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/state/selection-slice.ts b/node_modules/react-arborist/src/state/selection-slice.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/types/dnd.ts b/node_modules/react-arborist/src/types/dnd.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/types/handlers.ts b/node_modules/react-arborist/src/types/handlers.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/types/renderers.ts b/node_modules/react-arborist/src/types/renderers.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/types/state.ts b/node_modules/react-arborist/src/types/state.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/types/tree-props.ts b/node_modules/react-arborist/src/types/tree-props.ts
old mode 100644
new mode 100755
index 440bcc4..2ada067
--- a/node_modules/react-arborist/src/types/tree-props.ts
+++ b/node_modules/react-arborist/src/types/tree-props.ts
@@ -7,6 +7,27 @@ import { NodeApi } from "../interfaces/node-api";
 import { OpenMap } from "../state/open-slice";
 import { useDragDropManager } from "react-dnd";
 
+export type RowHeightCalculatorParams<T> = Pick<
+  NodeApi<T>,
+  | "childIndex"
+  | "children"
+  | "data"
+  | "parent"
+  | "id"
+  | "rowIndex"
+  | "tree"
+  | "isRoot"
+  | "isLeaf"
+  | "isClosed"
+  | "isOpen"
+  | "isAncestorOf"
+  | "level"
+>;
+
+export type RowHeightCalculator<T> = (
+  params: RowHeightCalculatorParams<T>,
+) => number;
+
 export interface TreeProps<T> {
   /* Data Options */
   data?: readonly T[];
@@ -26,7 +47,7 @@ export interface TreeProps<T> {
   renderContainer?: ElementType<{}>;
 
   /* Sizes */
-  rowHeight?: number;
+  rowHeight?: number | RowHeightCalculator<T>;
   overscanCount?: number;
   width?: number | string;
   height?: number;
diff --git a/node_modules/react-arborist/src/types/utils.ts b/node_modules/react-arborist/src/types/utils.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/src/utils.ts b/node_modules/react-arborist/src/utils.ts
old mode 100644
new mode 100755
diff --git a/node_modules/react-arborist/tsconfig.json b/node_modules/react-arborist/tsconfig.json
new file mode 100755
index 0000000..fe94429
--- /dev/null
+++ b/node_modules/react-arborist/tsconfig.json
@@ -0,0 +1,109 @@
+{
+  "compilerOptions": {
+    /* Visit https://aka.ms/tsconfig to read more about this file */
+
+    /* Projects */
+    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
+    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
+    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
+    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
+    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
+    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
+
+    /* Language and Environment */
+    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
+    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
+    "jsx": "react-jsx",                                  /* Specify what JSX code is generated. */
+    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
+    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
+    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
+    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
+    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
+    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
+    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
+    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
+    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
+
+    /* Modules */
+    "module": "commonjs",                                /* Specify what module code is generated. */
+    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
+    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
+    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
+    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
+    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
+    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
+    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
+    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
+    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
+    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
+    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
+    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
+    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
+    // "resolveJsonModule": true,                        /* Enable importing .json files. */
+    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
+    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
+
+    /* JavaScript Support */
+    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
+    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
+    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
+
+    /* Emit */
+    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
+    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
+    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
+    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
+    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
+    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
+    "outDir": "./dist",                                  /* Specify an output folder for all emitted files. */
+    // "removeComments": true,                           /* Disable emitting comments. */
+    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
+    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
+    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
+    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
+    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
+    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
+    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
+    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
+    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
+    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
+    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
+    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
+    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
+    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
+    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
+
+    /* Interop Constraints */
+    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
+    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
+    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
+    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
+    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
+    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
+
+    /* Type Checking */
+    "strict": true,                                      /* Enable all strict type-checking options. */
+    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
+    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
+    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
+    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
+    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
+    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
+    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
+    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
+    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
+    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
+    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
+    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
+    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
+    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
+    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
+    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
+    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
+    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
+
+    /* Completeness */
+    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
+    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
+  }
+}
